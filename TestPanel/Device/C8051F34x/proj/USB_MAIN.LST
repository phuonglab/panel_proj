C51 COMPILER V9.51   USB_MAIN                                                              06/19/2014 23:16:53 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_MAIN
OBJECT MODULE PLACED IN USB_MAIN.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe USB_MAIN.c DB OE INCDIR(c:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // USB_MAIN.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2002 Silicon Laboratories, Inc.
   5          //
   6          // AUTH: JS
   7          // DATE: 22 FEB 02
   8          //
   9          //
  10          // Target: C8051F34x
  11          // Tool chain: KEIL C51 6.03 / KEIL EVAL C51
  12          //             SDCC 2.8.0
  13          //             Raisonance RC51 V03.03.48
  14          //
  15          // REVISIONS:
  16          // 1/20/11  - ES: Disabled VREF and Temp Sensor before going into suspend.
  17          //          -     Modified temperature calculation
  18          // 3/25/10  - ES: Added support for Raisonance.
  19          // 5/26/09  - ES: Ported Code to compiler independent format.
  20          //                Compatible with SDCC.
  21          // 10/11/06 - PKC: Changed port I/O and ADC Mux settings to accommodate
  22          //            potentiometer at P2.5 on the 'F340 Target Board; Changed
  23          //            USBXpress API interrupt to 17.
  24          // 1/24/06  - PKC: Changed 'F320.h to 'F340.h
  25          // 4/4/03   - DM:   Ported code to use USB_API.lib instead of custom solution.
  26          // 5/6/03   - DM: Made changes to use new driver with better throughput.
  27          // 11/22/02 - DM:  Added support for switches and sample USB
  28          //            interrupt application.
  29          //
  30          // Obs: This program uses the following equation from the datasheet, chapter
  31          //       5.2:  Vtemp = 2.86T(C) + 776mV
  32          //
  33          //       Moving T(C) to the left-hand side we have:
  34          //
  35          //          T(C) = (1 / 2.86)Vtemp - (776mV / 2.86)
  36          //
  37          //       In this instance the equivalent linear equation is given by:
  38          //
  39          //          T(C) = 0.3497Vtemp - 271.33 (V in millivolts)
  40          //
  41          //       Converting from V to ADC would give us:
  42          //
  43          //          T(C) = (0.3497*VDD*ADC/1024) - 271.33;
  44          //
  45          //       Assuming a VDD = 3300 mV it leads to:
  46          //
  47          //          T(C) = 1.126*ADC_sum - 271.33;
  48          //
  49          //       To allow for precise calculations using fixed point math these
  50          //       factors are going to be scaled up 1000x
  51          //
  52          //-----------------------------------------------------------------------------
  53          // Includes
  54          //-----------------------------------------------------------------------------
  55          #include "compiler_defs.h"
C51 COMPILER V9.51   USB_MAIN                                                              06/19/2014 23:16:53 PAGE 2   

  56          #include "C8051f340_defs.h"
  57          #include <stddef.h>
  58          #include "USB_API.h"
  59          
  60          #define INTERRUPT_USBXpress 17
  61          
  62          //-----------------------------------------------------------------------------
  63          // Global CONSTANTS
  64          //-----------------------------------------------------------------------------
  65          
  66          SBIT(Led1, SFR_P2, 2);                    // LED='1' means ON
  67          SBIT(Led2, SFR_P2, 3);
  68          
  69          #define Sw1 0x01                          // These are the port2 bits for Sw1
  70          #define Sw2 0x02                          // and Sw2 on the development board
  71          
  72          #define OVER_ROUND 10                     // Number of shifts (>>N) to reach the
  73                                                    // correct number of bits of precision
  74          #define SCALE 1000L                       // Scale for temp calculations
  75          #define SLOPE 1148077                     // Slope of the temp transfer function
  76          #define SLOPE_DIV_1024 1126               // Slope of the temp transfer function divided by 1024
  77          #define OFFSET 271329L                    // Offset for the temp transfer function
  78          
  79          U8 Switch1State = 0;                      // Indicate status of switch
  80          U8 Switch2State = 0;                      // starting at 0 == off
  81          
  82          U8 Toggle1 = 0;                           // Variable to make sure each button
  83          U8 Toggle2 = 0;                           // press and release toggles switch
  84          
  85          U8 Potentiometer = 0x00;                  // Last read potentiometer value
  86          U8 Temperature = 0x00;                    // Last read temperature sensor value
  87          
  88          U8 Out_Packet[8] = {0,0,0,0,0,0,0,0};     // Last packet received from host
  89          U8 In_Packet[8]  = {0,0,0,0,0,0,0,0};     // Next packet to sent to host
  90          
  91          /*** [BEGIN] USB Descriptor Information [BEGIN] ***/
  92          SEGMENT_VARIABLE(USB_VID, U16, SEG_CODE) = 0x10C4;
  93          SEGMENT_VARIABLE(USB_PID, U16, SEG_CODE) = 0xEA61;
  94          SEGMENT_VARIABLE(USB_MfrStr[], U8, SEG_CODE) = // Manufacturer String
  95          {
  96             0x1A,
  97             0x03,
  98             'S',0,
  99             'i',0,
 100             'l',0,
 101             'i',0,
 102             'c',0,
 103             'o',0,
 104             'n',0,
 105             ' ',0,
 106             'L',0,
 107             'a',0,
 108             'b',0,
 109             's',0
 110          };
 111          SEGMENT_VARIABLE(USB_ProductStr[], U8, SEG_CODE) = // Product Desc. String
 112          {
 113             0x10,
 114             0x03,
 115             'U',0,
 116             'S',0,
 117             'B',0,
C51 COMPILER V9.51   USB_MAIN                                                              06/19/2014 23:16:53 PAGE 3   

 118             ' ',0,
 119             'A',0,
 120             'P',0,
 121             'I',0
 122          };
 123          
 124          SEGMENT_VARIABLE(USB_SerialStr[], U8, SEG_CODE) = // Serial Number String
 125          {
 126             0x0A,
 127             0x03,
 128             '1',0,
 129             '2',0,
 130             '3',0,
 131             '4',0
 132          };
 133          
 134          SEGMENT_VARIABLE(USB_MaxPower, U8, SEG_CODE) = 15;    // Max current = 30 mA
 135                                                                // (15 * 2)
 136          SEGMENT_VARIABLE(USB_PwAttributes, U8, SEG_CODE) = 0x80;    // Bus-powered,
 137                                                                      // remote wakeup not
 138                                                                      // supported
 139          SEGMENT_VARIABLE(USB_bcdDevice, U16, SEG_CODE) = 0x0100;    // Device release
 140                                                                      // number 1.00
 141          /*** [ END ] USB Descriptor Information [ END ] ***/
 142          
 143          SEG_CODE const U8 TEMP_ADD = 112;           // This constant is added to Temperature
 144          
 145          //-----------------------------------------------------------------------------
 146          // Function Prototypes
 147          //-----------------------------------------------------------------------------
 148          
 149          void Timer_Init(void);                       // Start timer 2 for use by ADC and to check switches
 150          void Adc_Init(void);
 151          void Port_Init(void);
 152          void Suspend_Device(void);
 153          void Initialize(void);
 154          
 155          //-----------------------------------------------------------------------------
 156          // Main Routine
 157          //-----------------------------------------------------------------------------
 158          void main(void)
 159          {
 160   1      
 161   1         PCA0MD &= ~0x40;                       // Disable Watchdog timer
 162   1      
 163   1         USB_Clock_Start();                     // Init USB clock *before* calling USB_Init
 164   1         USB_Init(USB_VID,USB_PID,USB_MfrStr,USB_ProductStr,USB_SerialStr,USB_MaxPower,USB_PwAttributes,USB_bcdD
             -evice);
 165   1      
 166   1         Initialize();
 167   1         USB_Int_Enable();
 168   1         while (1)
 169   1         {
 170   2      
 171   2      
 172   2          // It is possible that the contents of the following packets can change
 173   2          // while being updated.  This doesn't cause a problem in the sample
 174   2          // application because the bytes are all independent.  If data is NOT
 175   2          // independent, packet update routines should be moved to an interrupt
 176   2          // service routine, or interrupts should be disabled during data updates.
 177   2            if (Out_Packet[0] == 1) Led1 = 1;   // Update status of LED #1
 178   2            else Led1 = 0;
C51 COMPILER V9.51   USB_MAIN                                                              06/19/2014 23:16:53 PAGE 4   

 179   2            if (Out_Packet[1] == 1) Led2 = 1;   // Update status of LED #2
 180   2            else Led2 = 0;
 181   2            P1 = (Out_Packet[2] & 0x0F);        // Set Port 1 pins
 182   2      
 183   2      
 184   2            In_Packet[0] = Switch1State;        // Send status of switch 1
 185   2            In_Packet[1] = Switch2State;        // and switch 2 to host
 186   2            In_Packet[2] = (P0 & 0x0F);         // Port 0 [0-3] (make sure j9 & j10 jumpered)
 187   2            In_Packet[3] = Potentiometer;       // Potentiometer value
 188   2            In_Packet[4] = Temperature;         // Temperature sensor value
 189   2      
 190   2         }
 191   1      }
 192          
 193          //-----------------------------------------------------------------------------
 194          // Initialization Subroutines
 195          //-----------------------------------------------------------------------------
 196          
 197          //-------------------------
 198          // Port_Init
 199          //-------------------------
 200          // Port Initialization
 201          // - Configure the Crossbar and GPIO ports.
 202          //
 203          void Port_Init(void)
 204          {
 205   1         P2MDIN   = 0xDF;                        // Port 2 pin 5 set as analog input
 206   1         P0MDOUT |= 0x0F;                        // Port 0 pins 0-3 set high impedence
 207   1         P1MDOUT |= 0x0F;                        // Port 1 pins 0-3 set high impedence
 208   1         P2MDOUT |= 0x0C;                        // Port 2 pins 0,1 set high impedence
 209   1         P2SKIP   = 0x20;                        // Port 1 pin 7 skipped by crossbar
 210   1         XBR0     = 0x00;
 211   1         XBR1     = 0x40;                        // Enable Crossbar
 212   1      }
 213          
 214          //-------------------------
 215          // Timer_Init
 216          //-------------------------
 217          // Timer initialization
 218          // - 1 mhz timer 2 reload, used to check if switch pressed on overflow and
 219          // used for ADC continuous conversion
 220          //
 221          void Timer_Init(void)
 222          {
 223   1         TMR2CN  = 0x00;                        // Stop Timer2; Clear TF2;
 224   1      
 225   1         CKCON  &= ~0xF0;                       // Timer2 clocked based on T2XCLK;
 226   1         TMR2RL  = -(24000000 / 12);            // Initialize reload value
 227   1         TMR2    = 0xffff;                      // Set to reload immediately
 228   1      
 229   1         ET2     = 1;                           // Enable Timer2 interrupts
 230   1         TR2     = 1;                           // Start Timer2
 231   1      }
 232          
 233          //-------------------------
 234          // Adc_Init
 235          //-------------------------
 236          // ADC initialization
 237          // - Configures ADC for single ended continuous conversion or Timer2
 238          //
 239          void Adc_Init(void)
 240          {
C51 COMPILER V9.51   USB_MAIN                                                              06/19/2014 23:16:53 PAGE 5   

 241   1         REF0CN  = 0x0E;                        // Enable voltage reference VREF
 242   1         AMX0P = 0x1E;                          // Positive input starts as temp sensor
 243   1         AMX0N = 0x1F;                          // Single ended mode(negative input = gnd)
 244   1      
 245   1         ADC0CF  = 0xF8;                        // SAR Period 0x1F, Right adjusted output
 246   1      
 247   1         ADC0CN  = 0xC2;                        // Continuous converion on timer 2 overflow
 248   1                                                // with low power tracking mode on
 249   1      
 250   1         EIE1   |= 0x08;                        // Enable conversion complete interrupt
 251   1      }
 252          
 253          //-------------------------
 254          // Suspend_Device
 255          //-------------------------
 256          // Called when a DEV_SUSPEND interrupt is received.
 257          // - Disables all unnecessary peripherals
 258          // - Calls USB_Suspend()
 259          // - Enables peripherals once device leaves suspend state
 260          //
 261          void Suspend_Device(void)
 262          {
 263   1         // Disable peripherals before calling USB_Suspend()
 264   1         P0MDIN = 0x00;                       // Port 0 configured as analog input
 265   1         P1MDIN = 0x00;                       // Port 1 configured as analog input
 266   1         P2MDIN = 0x00;                       // Port 2 configured as analog input
 267   1         P3MDIN = 0x00;                       // Port 3 configured as analog input
 268   1         REF0CN  &= ~0x0E;                    // Disable voltage reference VREF, Temp Sensor
 269   1         ADC0CN &= ~0x80;                     // Disable ADC0
 270   1         ET2 = 0;                             // Disable Timer 2 Interrupts
 271   1      
 272   1      
 273   1         USB_Suspend();                       // Put the device in suspend state
 274   1      
 275   1         // Once execution returns from USB_Suspend(), device leaves suspend state.
 276   1         // Reenable peripherals
 277   1         REF0CN  = 0x0E;                      // Enable voltage reference VREF, Temp Sensor
 278   1         ADC0CN |= 0x80;                      // Enable ADC0
 279   1         P0MDIN = 0xFF;
 280   1         P1MDIN = 0x7F;                       // Port 1 pin 7 set as analog input
 281   1         P2MDIN = 0xFF;
 282   1         P3MDIN = 0x01;
 283   1         ET2 = 1;                             // Enable Timer 2 Interrupts
 284   1      }
 285          
 286          //-------------------------
 287          // Initialize
 288          //-------------------------
 289          // Called when a DEV_CONFIGURED interrupt is received.
 290          // - Enables all peripherals needed for the application
 291          //
 292          void Initialize(void)
 293          {
 294   1         Port_Init();                           // Initialize crossbar and GPIO
 295   1         Timer_Init();                          // Initialize timer2
 296   1         Adc_Init();                            // Initialize ADC
 297   1      
 298   1      }
 299          
 300          
 301          //-------------------------
 302          // Timer2_ISR
C51 COMPILER V9.51   USB_MAIN                                                              06/19/2014 23:16:53 PAGE 6   

 303          //-------------------------
 304          // Called when timer 2 overflows, check to see if switch is pressed,
 305          // then watch for release.
 306          //
 307          INTERRUPT(Timer2_ISR, INTERRUPT_TIMER2)
 308          {
 309   1         if (!(P2 & Sw1))                       // Check for switch #1 pressed
 310   1         {
 311   2            if (Toggle1 == 0)                   // Toggle is used to debounce switch
 312   2            {                                   // so that one press and release will
 313   3               Switch1State = ~Switch1State;    // toggle the state of the switch sent
 314   3               Toggle1 = 1;                     // to the host
 315   3            }
 316   2         }
 317   1         else Toggle1 = 0;                      // Reset toggle variable
 318   1      
 319   1         if (!(P2 & Sw2))                       // This is the same as above, but for Switch2
 320   1         {
 321   2            if (Toggle2 == 0)
 322   2            {
 323   3               Switch2State = ~Switch2State;
 324   3               Toggle2 = 1;
 325   3            }
 326   2         }
 327   1         else Toggle2 = 0;
 328   1      
 329   1         TF2H = 0;                              // Clear Timer2 interrupt flag
 330   1      }
 331          
 332          //-------------------------
 333          // Adc_ConvComplete_ISR
 334          //-------------------------
 335          // Called after a conversion of the ADC has finished
 336          // - Updates the appropriate variable for either potentiometer or temperature sensor
 337          // - Switches the Adc multiplexor value to switch between the potentiometer and temp sensor
 338          //
 339          INTERRUPT(Adc_ConvComplete_ISR, INTERRUPT_ADC0_EOC)
 340          {
 341   1         U32 temperature_calc;
 342   1         
 343   1         if (AMX0P == 0x1E)                     // This switches the AMUX between
 344   1         {                                      // the temperature sensor and the
 345   2            temperature_calc = ADC0;            // Read ADC value
 346   2      
 347   2            temperature_calc *= SLOPE_DIV_1024; // Multiply Slope of transfer function
 348   2                                                // and divide by 1024 to convert from ADC
 349   2                                                // counts to mV
 350   2      
 351   2            temperature_calc -= OFFSET;         // subtract offset from equation
 352   2            temperature_calc /= SCALE;          
 353   2            
 354   2            Temperature   = (U8)temperature_calc;
 355   2      
 356   2            AMX0P       = 0x04;                 // switch to potentiometer ('F340 - P2.5)
 357   2            ADC0CF      = 0xFC;                 // place ADC0 in left-adjusted mode
 358   2         }
 359   1         else
 360   1         {
 361   2            Potentiometer = ADC0H;
 362   2            AMX0P       = 0x1E;                 // switch to temperature sensor
 363   2            ADC0CF      = 0xF8;                  // place ADC0 in right-adjusted mode
 364   2         }
C51 COMPILER V9.51   USB_MAIN                                                              06/19/2014 23:16:53 PAGE 7   

 365   1      
 366   1         AD0INT = 0;
 367   1         Block_Write(In_Packet, 8);
 368   1      }
 369          
 370          
 371          // Example ISR for USB_API
 372          INTERRUPT(USB_API_TEST_ISR, INTERRUPT_USBXpress)
 373          {
 374   1         U8 INTVAL = Get_Interrupt_Source();
 375   1      
 376   1         if (INTVAL & RX_COMPLETE)
 377   1         {
 378   2            Block_Read(Out_Packet, 8);
 379   2         }
 380   1      
 381   1         if (INTVAL & DEV_SUSPEND)
 382   1         {
 383   2              Suspend_Device();
 384   2         }
 385   1      
 386   1         if (INTVAL & DEV_CONFIGURED)
 387   1         {
 388   2            Initialize();
 389   2         }
 390   1      
 391   1      }
 392          
 393          // Startup code for SDCC to disablt WDT before initializing variables so that
 394          // a reset does not occur
 395          #if defined SDCC
              void _sdcc_external_startup (void)
              {
                 PCA0MD &= ~0x40;                       // Disable Watchdog timer
              }
              #endif
 401          
 402          // ============================================================================
 403          // *** END OF FILE ***
 404          // ============================================================================


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    583    ----
   CONSTANT SIZE    =     61    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
